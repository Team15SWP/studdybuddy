@startuml
title Static View: Chatbot Architecture for Programming Practice

skinparam componentStyle rectangle
skinparam shadowing true
skinparam linetype polyline
skinparam roundCorner 10
skinparam defaultTextAlignment center
skinparam packageTitleAlignment left

' Presentation Layer
package "Presentation Layer" {
    [Frontend\nWeb Interface]
}

' API Layer
package "API Layer" {
    [Backend API\n(FastAPI)]
    [Auth Module]
}

' Application Logic Layer
package "Application Logic Layer" {
    [LLM Integration\n(OpenAI / DeepSeek)]
    [AI Logic]
    [Notification System]
    [History Manager]
}

' Data Layer
package "Data Layer" {
    database [Database\n(SQLite / PostgreSQL)]
}

' Communication arrows
[Frontend\nWeb Interface] --> [Backend API\n(FastAPI)] : HTTPS Request (REST)
[Backend API\n(FastAPI)] --> [Auth Module] : Verify token / Register / Login
[Auth Module] --> [Database\n(SQLite / PostgreSQL)] : Read/write user data

[Backend API\n(FastAPI)] --> [AI Logic] : Request task generation
[AI Logic] --> [LLM Integration\n(OpenAI / DeepSeek)] : Call LLM API
[LLM Integration\n(OpenAI / DeepSeek)] --> [AI Logic] : Return task/code

[AI Logic] --> [History Manager] : Save generated task
[History Manager] --> [Database\n(SQLite / PostgreSQL)] : Write history

[Backend API\n(FastAPI)] --> [Notification System] : Schedule practice notification
[Notification System] --> [Database\n(SQLite / PostgreSQL)] : Store/read schedules

[Frontend\nWeb Interface] <-- [Backend API\n(FastAPI)] : Return response (task / message / status)

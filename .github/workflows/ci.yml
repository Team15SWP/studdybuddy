name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$PWD" >> $GITHUB_ENV
        
      - name: Set up deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run linter
        run: |
          pip install flake8
          flake8 . --exclude=venv,env,.venv,__pycache__,.git,.github \
                   --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Run tests with coverage
        run: |
          pip install pytest pytest-cov
          pytest --cov=. --cov-report=term

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.23.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          
      - name: Build & start services
        run: docker-compose up -d --build

      - name: Wait for services to be ready
        run: sleep 10

      - name: Run unit tests
        run: pytest tests/unit_tests/ --maxfail=1 -q

      - name: Run integration tests
        run: pytest tests/integration/ --maxfail=1 -q

      - name: Tear down services
        if: always()
        run: docker-compose down
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: |
          docker-compose build

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /var/www/studdybuddy
            git reset --hard HEAD
            git clean -fd
            git pull origin main
            echo "OPENROUTER_API_KEY=${{ secrets.OPENROUTER_API_KEY }}" > .env
            docker-compose down
            docker-compose up -d --build
